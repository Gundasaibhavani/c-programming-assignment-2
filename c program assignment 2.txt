1.
#include <stdio.h>

int main() {
    int arr[] = {12, 56, 34, 78, 100};
    int n = sizeof(arr) / sizeof(arr[0]);
    int max = arr[0];

    for (int i = 1; i < n; i++) {
        if (arr[i] > max) {
            max = arr[i];
        }
    }

    printf("Largest element of the array is: %d", max);

    return 0;
}




2.
#include <stdio.h>

void findLargestTwo(int arr[], int n) {
    int largest1 = arr[0];
    int largest2 = arr[0];
    
    for (int i = 1; i < n; i++) {
        if (arr[i] > largest1) {
            largest2 = largest1;
            largest1 = arr[i];
        }
        else if (arr[i] > largest2 && arr[i] != largest1) {
            largest2 = arr[i];
        }
    }
    
    printf("FIRST LARGEST = %d\n", largest1);
    printf("SECOND LARGEST = %d\n", largest2);
}

int main() {
    int n;
    printf("Enter the number of elements in the array: ");
    scanf("%d", &n);
    
    int arr[n];
    printf("Enter the elements of the array: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }
    
    findLargestTwo(arr, n);
    
    return 0;
}



3.
# include < stdio.h >
int  main( )
{
int  a[20], b[20], n, sml=0, pos, i, j, temp ;
printf(" Enter the Numbers of terms: ") ;
scanf("%d ",& n) ;
printf("\n Enter the terms : \n") ;
for (  i = 1 ; i < = n ; i++)
{
scanf("%d ",& a[i]) ;
b[i] = a[i] ;
}
for (  i = 1 ; i < = n ; i++)
{
for (  j = 1 ; j < = n ; j++)
{
if ( a[i] <= a[j] )
{
temp = a[i] ;
a[i] = a[j] ;
a[j] = temp ;
}}}
printf("\n The Array Elements are: \n") ;
for (  i = 1 ; i < = n ; i++)
printf(" %d \t",b[i]) ;

printf("\n Second Smallest Element is : %d",a[2]) ;
printf("\n Second Largest Element is : %d",a[n-1]) ;
return ( 0 ) ;
}




4.
 * C Program to Find 2 Elements in the Array such that Difference between them is Largest
 */
 #include <stdio.h>
 
int maximum_difference(int array[], int arr_size)
{
    int max_diff = array[1] - array[0];
    int i, j;
    for (i = 0; i < arr_size; i++)
    {
        for (j = i + 1; j < arr_size; j++)
        {
            if (array[j] - array[i] > max_diff)
                max_diff = array[j] - array[i];
        }
    }
    return max_diff;
}
 
int main()
{
    int array[] = {10, 15, 90, 200, 110};
    printf("Maximum difference is %d",  maximum_difference(array, 5));
    getchar();
    return 0;
}



5.
#include <stdio.h>
int main()
{
    int n, count = 0;
    printf("Enter number of elements in the array: ");
    scanf("%d", &n);
    int arr[n], temp[n];
    if(n==0)
    {
        printf("No element inside the array.");
        exit(0);
    }
    printf("Enter elements in the array: ");
    for (int i = 0; i < n; i++)
    {
        scanf("%d", &arr[i]);
    }
 
    printf("\nArray Before Removing Duplicates: ");
    for (int i = 0; i < n; i++)
        printf("%d ", arr[i]);
 
    // To store unique elements in temp after removing the duplicate elements
    for (int i = 0; i < n; i++)
    {
        int j;
        for (j = 0; j < count; j++)
        {
          if (arr[i] == temp[j])
            break;
        }
        if (j == count)
        {
          temp[count] = arr[i];
          count++;
        }
    }
 
    printf("\nArray After  Removing Duplicates: ");
    for (int i = 0; i < count; i++)
        printf("%d ", temp[i]);
 
    return 0;
}



6.
#include <stdio.h>
 #include <conio.h>
print(int *a,int n)
 { 
    int i;
    
	
 
    for(i=0; i<n; i++)
    {
      
        	printf("%d  ",a[i]);
 
		 
    }
 	
 }
  
 
int main()
{
    int a[10000],b[10000],c[20000],i,j,k,n1,n2,n ;
   
    printf("Enter size of the  array : ");
    scanf("%d", &n);
    printf("Enter elements in array : ");
    for(i=0; i<n; i++)
    {
        scanf("%d",&a[i]);
    }
     printf("\n original array  \n");
 
    print(a,n);
    j=k=0;
    for(i=0; i<n; i++)
    {
        if(a[i]%2==0)
          b[j++]=a[i];
        else
          c[k++]=a[i];
 
    }
     
    printf(" \n even array \n");
 
    print(b,j);
    printf(" \n odd array \n");
 
    print(c,k);
        
        
   
 
  
    return 0;
}




7.
#include <stdio.h>

int main() {
    int arr[100], reversed[100];
    int size, i, j;

    printf("Enter the size of the array: ");
    scanf("%d", &size);

    printf("Enter the elements of the array: ");
    for (i = 0; i < size; i++) {
        scanf("%d", &arr[i]);
    }

    // Reverse the array
    for (i = size - 1, j = 0; i >= 0; i--, j++) {
        reversed[j] = arr[i];
    }

    // Check if it is a palindrome
    int palindrome = 1;
    for (i = 0; i < size; i++) {
        if (arr[i] != reversed[i]) {
            palindrome = 0;
            break;
        }
    }

    if (palindrome) {
        printf("The array is a palindrome.\n");
    } else {
        printf("The array is not a palindrome.\n");
    }

    return 0;
}




8.
#include <stdio.h>

void main()
{
    int arr1[100], fr1[100];
    int n, i, j, ctr;
	
	
       printf("\n\nCount frequency of each element of an array:\n");
       printf("------------------------------------------------\n");	

       printf("Input the number of elements to be stored in the array :");
       scanf("%d",&n);
   
       printf("Input %d elements in the array :\n",n);
       for(i=0;i<n;i++)
            {
	      printf("element - %d : ",i);
	      scanf("%d",&arr1[i]);
		  fr1[i] = -1;
	    }
    for(i=0; i<n; i++)
    {
        ctr = 1;
        for(j=i+1; j<n; j++)
        {
            if(arr1[i]==arr1[j])
            {
                ctr++;
                fr1[j] = 0;
            }
        }

        if(fr1[i]!=0)
        {
            fr1[i] = ctr;
        }
    }
    printf("\nThe frequency of all elements of array : \n");
    for(i=0; i<n; i++)
    {
        if(fr1[i]!=0)
        {
            printf("%d occurs %d times\n", arr1[i], fr1[i]);
        }
    }
}



9.
#include <stdio.h>    
 int main()    
{    
    //Initialize array     
    int arr[] = {5, 2, 8, 7, 1};     
    int temp = 0;    
        
    //Calculate length of array arr    
    int length = sizeof(arr)/sizeof(arr[0]);    
        
    //Displaying elements of original array    
    printf("Elements of original array: \n");    
    for (int i = 0; i < length; i++) {     
        printf("%d ", arr[i]);     
    }      
        
    //Sort the array in descending order    
    for (int i = 0; i < length; i++) {     
        for (int j = i+1; j < length; j++) {     
           if(arr[i] < arr[j]) {    
               temp = arr[i];    
               arr[i] = arr[j];    
               arr[j] = temp;    
           }     
        }     
    }    
    printf("\n");    
    //Displaying elements of array after sorting    
    printf("Elements of array sorted in descending order: \n");    
    for (int i = 0; i < length; i++) {     
        printf("%d ", arr[i]);    
    }    
    return 0;    
}




10.
#include<stdio.h>
#include<limits.h>

int minJumps(int arr[], int n)
{
    if (n <= 1)
        return 0;

    int max_reach = arr[0];
    int steps = arr[0];
    int jumps = 1;

    for (int i = 1; i < n; i++) {
        if (i == n - 1)
            return jumps;

        max_reach = (max_reach > i + arr[i]) ? max_reach : i + arr[i];

        steps--;

        if (steps == 0) {
            jumps++;

            if (i >= max_reach)
                return -1;

            steps = max_reach - i;
        }
    }

    return -1;
}

int main()
{
    int arr[] = {1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9};
    int n = sizeof(arr) / sizeof(arr[0]);

    printf("Minimum number of jumps required to reach end is %d\n", minJumps(arr, n));
    return 0;
}